@extends('layouts.user')

@section("title", "T√¨m Ki·∫øm ƒê√°nh Gi√°")

@section('content')
<div class="page-content">
    <div class="container-fluid">
        <div class="text-center mb-4">
            <h2 class="fw-bold">T√¨m Ki·∫øm ƒê√°nh Gi√°</h2>
            <p>Nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ tra c·ª©u ƒë√°nh gi√° c·ªßa th∆∞∆°ng hi·ªáu b·∫°n quan t√¢m.</p>
        </div>


        <!-- Form t√¨m ki·∫øm -->
        <form id="evaluateForm" class="mb-3">
            <div class="mb-3">
                <label for="brandInput">Th∆∞∆°ng hi·ªáu</label>
                <input id="brandInput"
                    class="form-control me-1"
                    value="{{ $brand_name ?? '' }}"
                    type="search"
                    placeholder="üîç Nh·∫≠p t√™n th∆∞∆°ng hi·ªáu..."
                    aria-label="Th∆∞∆°ng hi·ªáu"
                    {{ $brand_name || $word_search ? 'readonly' : '' }}>
            </div>

            <div class="mb-3">
                <label for="wordSearchInput">T·ª´ kho√°</label>
                <input id="wordSearchInput"
                    class="form-control me-1"
                    value="{{ $word_search ?? '' }}"
                    type="search"
                    placeholder="üîç Nh·∫≠p t·ª´ kho√°..."
                    aria-label="T·ª´ kho√°"
                    {{ $brand_name || $word_search ? 'readonly' : '' }}>
            </div>

            <button class="btn btn-success" type="submit">Search</button>
        </form>

        <div id="result-brand"></div>

        <div id="chart_grid_id" class="none">
            <div class="row">
                <!-- Bi·ªÉu ƒë·ªì pie chart t·ª∑ l·ªá b√†i vi·∫øt t·ª´ group v√† pages  -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">

                            <div class="chart-card">
                                <canvas width="500" height="500" id="ty_le_bai_viet_group_page"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì horizontal-bar-chart s·ªë l∆∞·ª£ng b√†i vi·∫øt t·ª´ group v√† pages  -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">
                            <div class="chart-card">
                                <canvas width="700" height="500" id="so_luong_bai_viet_group_page"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì horizontal-bar-chart s·ªë l∆∞·ª£ng comment group v√† pages  -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">
                            <div class="chart-card">
                                <canvas width="700" height="500" id="so_luong_comment_group_page"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì horizontal-bar-chart s·ªë l∆∞·ª£ng b√†i vi·∫øt theo word_search -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">
                            <div class="chart-card">
                                <canvas width="500" height="" id="so_luong_bai_viet_word_search"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì pie chart ph·∫ßn trƒÉm c·∫£m x√∫c  -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">

                            <div class="chart-card">
                                <canvas width="500" height="500" id="pieChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì barchart th·ªÉ hi·ªán s·ªë l∆∞·ª£ng c·∫£m x√∫c (t·ªët x·∫•u)  -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">

                            <div class="chart-card">
                                <canvas width="500" height="500" id="wordChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì wordCloudChart th·ªÉ hi·ªán t·ª´ t·ªët ph·ªï bi·∫øn -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">

                            <div class="chart-card">
                                <canvas width="500" height="500" id="wordCloudChartGood"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì wordCloudChart th·ªÉ hi·ªán t·ª´ x·∫•u ph·ªï bi·∫øn -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">

                            <div class="chart-card">
                                <canvas width="500" height="500" id="wordCloudChartBad"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán top 10 t·ª´ x·∫•u ph·ªï bi·∫øn -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">

                            <div class="chart-card">
                                <canvas width="500" height="500" id="top_10_xau"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán top 10 t·ª´ x·∫•u ph·ªï bi·∫øn -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">

                            <div class="chart-card">
                                <canvas width="500" height="500" id="top_10_tot"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì lineChart th·ªÉ hi·ªán t·ª∑ l·ªá c·∫£m x√∫c theo th·ªùi gian -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">
                            <div class="chart-card">
                                <canvas width="" height="300" id="lineChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì lineChart th·ªÉ hi·ªán s·ªë l∆∞·ª£ng comment theo th·ªùi gian -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">
                            <div class="chart-card">
                                <canvas width="" height="300" id="so_luong_comment_theo_thoi_gian"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì box-plot th·ªÉ hi·ªán s·ªë l∆∞·ª£ng t·ªët x·∫•u trung b√¨nh tr√™n m·ªói comment -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">
                            <div class="chart-card">
                                <canvas width="" height="300" id="so_luong_tot_xau_tren_comment"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bi·ªÉu ƒë·ªì Stacked bar chart th·ªÉ hi·ªán Ph√¢n b·ªï c·∫£m x√∫c theo t·ª´ng t·ª´ kho√° t√¨m ki·∫øm -->
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">
                            <div class="chart-card">
                                <canvas width="" height="300" id="cam_xuc_theo_tu_khoa"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
@endsection

<script>
    "use strict";

    let bieu_do_pie_post_group_page = null;
    let bieu_do_horizontal_bar_chart_post_group_page = null
    let bieu_do_horizontal_bar_chart_post_word_search = null
    let bieu_do_line_chart_comment_time = null
    let bieu_do_horizontal_bar_chart_comment_group_page = null
    let sentimentChart = null;
    let wordChartCoutChart = null;
    let wordCloudChartGood = null;
    let wordCloudChartBad = null;
    let bieu_do_top_10_tot = null
    let bieu_do_top_10_xau = null
    let bieu_do_tot_xau_tren_comment = null
    let bieu_do_cam_xuc_theo_tu_khoa = null
    let lineChart = null;


    // === C·∫§U H√åNH CHUNG ===
    const titleConfig = (text, size = 24) => ({
        display: true,
        text,
        color: '#333',
        font: {
            size
        }
    });

    const axisConfig = (label) => ({
        title: {
            display: true,
            text: label,
            color: '#333',
            font: {
                size: 16
            }
        },
        ticks: {
            color: '#333'
        }
    });

    const optionsWordChart = (label, size = 28) => ({
        color: '#333',
        plugins: {
            legend: {
                display: false
            },
            title: {
                display: true,
                text: label,
                color: '#333',
                font: {
                    size
                }
            },
            wordCloud: {
                minFontSize: 10, // ch·ªØ nh·ªè nh·∫•t
                maxFontSize: 40 // ch·ªØ l·ªõn nh·∫•t ‚Äì KH√îNG ƒë·ªÉ qu√° l·ªõn (vd: 80)
            },
        }
    })




    // === BI·ªÇU ƒê·ªí PIE: t·ª∑ l·ªá b√†i vi·∫øt t·ª´ group v√† page ===
    function show_bieu_do_pie_post_group_page(group, page) {
        if (bieu_do_pie_post_group_page) bieu_do_pie_post_group_page.destroy();

        const ctx = document.getElementById('ty_le_bai_viet_group_page').getContext('2d');
        bieu_do_pie_post_group_page = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ['Group', 'Fanpage'],
                datasets: [{
                    data: [group, page],
                    backgroundColor: ['#ff81b7', '#9792e8'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: false,
                plugins: {
                    datalabels: {
                        color: '#333',
                        font: {
                            weight: 'bold',
                            size: 14
                        },
                        formatter: value => typeof value === "number" ? value.toFixed(2) + '%' : value
                    },
                    legend: {
                        labels: {
                            color: '#333'
                        }
                    },
                    title: titleConfig(`Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª∑ l·ªá b√†i vi·∫øt trong Group v√† Fanpages`, 28)
                }
            },
            plugins: [ChartDataLabels]
        });
    }

    // === BI·ªÇU ƒê·ªí PIE: s·ªë l∆∞·ª£ng b√†i vi·∫øt t·ª´ group v√† page ===
    function show_bieu_do_horizontal_bar_chart_post_group_page(group, page) {
        if (bieu_do_horizontal_bar_chart_post_group_page) bieu_do_horizontal_bar_chart_post_group_page.destroy();

        const ctx = document.getElementById('so_luong_bai_viet_group_page').getContext('2d');
        bieu_do_horizontal_bar_chart_post_group_page = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Group', 'Fanpages'],
                datasets: [{
                    axis: 'y',
                    label: 'S·ªë l∆∞·ª£ng b√†i vi·∫øt',
                    data: [group, page],
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.2)', // Xanh ng·ªçc
                        'rgba(255, 206, 86, 0.2)' // V√†ng s√°ng
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                        'rgba(255, 206, 86, 1)'
                    ],
                    hoverBackgroundColor: [
                        'rgba(75, 192, 192, 0.5)',
                        'rgba(255, 206, 86, 0.5)'
                    ],
                    borderWidth: 1

                }]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                plugins: {
                    datalabels: {
                        color: '#333',
                        font: {
                            weight: 'bold',
                            size: 14
                        },
                        formatter: (value) => value // kh√¥ng c√≥ d·∫•u %
                    },
                    title: titleConfig('Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán s·ªë l∆∞·ª£ng b√†i vi·∫øt c·ªßa group v√† fanpage', 24),
                    legend: {
                        display: false
                    }
                },
                scales: {
                    x: axisConfig("S·ªë l∆∞·ª£ng"),
                }
            },
            plugins: [ChartDataLabels]
        });
    }

    // === BI·ªÇU ƒê·ªí bar h: s·ªë l∆∞·ª£ng comment t·ª´ group v√† page ===
    function show_bieu_do_horizontal_bar_chart_comment_group_page(group, page) {
        if (bieu_do_horizontal_bar_chart_comment_group_page) bieu_do_horizontal_bar_chart_comment_group_page.destroy();

        const ctx = document.getElementById('so_luong_comment_group_page').getContext('2d');
        bieu_do_horizontal_bar_chart_comment_group_page = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Group', 'Fanpages'],
                datasets: [{
                    label: 'S·ªë l∆∞·ª£ng comments',
                    data: [group, page],
                    backgroundColor: ['rgba(255, 159, 64, 0.2)', 'rgba(153, 102, 255, 0.2)'],
                    borderColor: ['rgba(255, 159, 64, 1)', 'rgba(153, 102, 255, 1)'],
                    borderWidth: 1,
                    hoverBackgroundColor: ['rgba(255, 159, 64, 0.5)', 'rgba(153, 102, 255, 0.5)']
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    datalabels: {
                        color: '#333',
                        font: {
                            weight: 'bold',
                            size: 14
                        },
                        formatter: (value) => value // kh√¥ng c√≥ d·∫•u %
                    },
                    title: titleConfig('Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán s·ªë l∆∞·ª£ng comments c·ªßa group v√† fanpage', 24),
                    legend: {
                        display: false
                    }
                },
                scales: {
                    x: axisConfig("S·ªë l∆∞·ª£ng"),
                }
            },
            plugins: [ChartDataLabels]
        });
    }

    // === BI·ªÇU ƒê·ªí PIE: t·ª∑ l·ªá b√†i vi·∫øt t·ª´ group v√† page ===
    function show_bieu_do_horizontal_bar_chart_post_word_search(words, values) {
        if (bieu_do_horizontal_bar_chart_post_word_search) bieu_do_horizontal_bar_chart_post_word_search.destroy();

        const ctx = document.getElementById('so_luong_bai_viet_word_search').getContext('2d');

        // H√†m t·∫°o m√†u s·∫Øc random (ho·∫∑c c√≥ th·ªÉ d√πng b·∫£ng m√†u c·ªë ƒë·ªãnh n·∫øu mu·ªën)
        const generateColors = (length) => {
            const backgroundColors = [];
            const borderColors = [];
            const hoverColors = [];

            const baseColors = [
                [255, 99, 132],
                [54, 162, 235],
                [255, 206, 86],
                [75, 192, 192],
                [153, 102, 255],
                [255, 159, 64]
            ];

            for (let i = 0; i < length; i++) {
                const color = baseColors[i % baseColors.length];
                backgroundColors.push(`rgba(${color[0]}, ${color[1]}, ${color[2]}, 0.2)`);
                borderColors.push(`rgba(${color[0]}, ${color[1]}, ${color[2]}, 1)`);
                hoverColors.push(`rgba(${color[0]}, ${color[1]}, ${color[2]}, 0.5)`);
            }

            return {
                backgroundColors,
                borderColors,
                hoverColors
            };
        };

        const {
            backgroundColors,
            borderColors,
            hoverColors
        } = generateColors(words.length);

        bieu_do_horizontal_bar_chart_post_word_search = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: words,
                datasets: [{
                    label: 'S·ªë l∆∞·ª£ng b√†i vi·∫øt',
                    data: values,
                    backgroundColor: backgroundColors,
                    borderColor: borderColors,
                    hoverBackgroundColor: hoverColors,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    datalabels: {
                        color: '#333',
                        font: {
                            weight: 'bold',
                            size: 14
                        },
                        formatter: (value) => value
                    },
                    title: titleConfig('Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán s·ªë l∆∞·ª£ng b√†i vi·∫øt theo t·ª´ kh√≥a', 24),
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: axisConfig("S·ªë l∆∞·ª£ng")
                }
            },
            plugins: [ChartDataLabels]
        });
    }


    // === BI·ªÇU ƒê·ªí PIE: C·∫¢M X√öC ===
    function showSentimentChart(positive, negative) {
        if (sentimentChart) sentimentChart.destroy();

        const ctx = document.getElementById('pieChart').getContext('2d');
        sentimentChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ['T√≠ch c·ª±c', 'Ti√™u c·ª±c'],
                datasets: [{
                    data: [positive, negative],
                    backgroundColor: ['#ff81b7', '#9792e8'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: false,
                plugins: {
                    datalabels: {
                        color: '#333',
                        font: {
                            weight: 'bold',
                            size: 14
                        },
                        formatter: value => typeof value === "number" ? value.toFixed(2) + '%' : value
                    },
                    legend: {
                        labels: {
                            color: '#333'
                        }
                    },
                    title: titleConfig(`Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª∑ l·ªá c·∫£m x√∫c`, 28)
                }
            },
            plugins: [ChartDataLabels]
        });
    }

    // === BI·ªÇU ƒê·ªí C·ªòT: T·ª™ T·ªêT/X·∫§U ===
    function showWordCountChart(tuTot, tuXau) {
        if (wordChartCoutChart) wordChartCoutChart.destroy();

        const ctx = document.getElementById('wordChart').getContext('2d');
        wordChartCoutChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['T·ª´ T·ªët', 'T·ª´ X·∫•u'],
                datasets: [{
                    label: 'S·ªë l∆∞·ª£ng t·ª´',
                    data: [tuTot.length, tuXau.length],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)', // ƒê·ªè h·ªìng
                        'rgba(54, 162, 235, 0.2)' // Xanh d∆∞∆°ng
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)'
                    ],
                    hoverBackgroundColor: [
                        'rgba(255, 99, 132, 0.5)',
                        'rgba(54, 162, 235, 0.5)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    datalabels: {
                        color: '#333',
                        font: {
                            weight: 'bold',
                            size: 14
                        },
                        formatter: (value) => value // kh√¥ng c√≥ d·∫•u %
                    },
                    title: titleConfig('Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán s·ªë l∆∞·ª£ng t·ª´ t·ªët v√† t·ª´ x·∫•u', 24),
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: axisConfig("S·ªë l∆∞·ª£ng"),
                    x: axisConfig("Lo·∫°i t·ª´")
                }
            },
            plugins: [ChartDataLabels]
        });
    }

    // === BI·ªÇU ƒê·ªí WordCloud: T·ª™ T·ªêT/X·∫§U ===
    function showWordCloudChartGood(words) {
        const weights = words.map(d => d.weight);
        const min = Math.min(...weights);
        const max = Math.max(...weights);

        // Scale v·ªÅ 10‚Äì40:
        const scaledWeights = weights.map(w => {
            const normalized = (w - min) / (max - min);
            return 20 + normalized * 20; // font size t·ª´ 10 ƒë·∫øn 40
        });

        wordCloudChartGood?.destroy();
        const ctx = document.getElementById("wordCloudChartGood");
        wordCloudChartGood = new Chart(ctx, {
            type: "wordCloud",
            data: {
                labels: words.map(w => w.word),
                datasets: [{
                    label: 'T·ª´ t√≠ch c·ª±c ph·ªï bi·∫øn',
                    data: scaledWeights,
                }]
            },
            options: optionsWordChart("Bi·ªÉu ƒë·ªì WordChart t√≠ch c·ª±c ph·ªï bi·∫øn")
        });
    }

    function showWordCloudChartBad(words) {
        const weights = words.map(d => d.weight);
        const min = Math.min(...weights);
        const max = Math.max(...weights);

        // Scale v·ªÅ 10‚Äì40:
        const scaledWeights = weights.map(w => {
            const normalized = (w - min) / (max - min);
            return 20 + normalized * 20; // font size t·ª´ 10 ƒë·∫øn 40
        });
        wordCloudChartBad?.destroy();

        const ctx = document.getElementById("wordCloudChartBad");
        wordCloudChartBad = new Chart(ctx, {
            type: "wordCloud",
            data: {
                labels: words.map(w => w.word),
                datasets: [{
                    label: 'T·ª´ ti√™u c·ª±c ph·ªï bi·∫øn',
                    data: scaledWeights,
                }]
            },
            options: optionsWordChart("Bi·ªÉu ƒë·ªì WordChart ti√™u c·ª±c ph·ªï bi·∫øn")
        });
    }

    // === BI·ªÇU ƒê·ªí C·ªòT: T·ª™ T·ªêT/X·∫§U ===
    function show_top_10_xau(words, weights) {
        if (bieu_do_top_10_xau) bieu_do_top_10_xau.destroy();

        const ctx = document.getElementById('top_10_xau').getContext('2d');
        bieu_do_top_10_xau = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: words, // T√™n c√°c t·ª´ ti√™u c·ª±c
                datasets: [{
                    label: 'S·ªë l∆∞·ª£ng t·ª´',
                    data: weights, // S·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c t·ª´
                    backgroundColor: 'rgba(75, 192, 192, 0.2)', // Xanh l√° c√¢y nh·∫°t
                    borderColor: 'rgba(75, 192, 192, 1)', // Xanh l√° c√¢y ƒë·∫≠m
                    hoverBackgroundColor: 'rgba(75, 192, 192, 0.5)', // Xanh l√° c√¢y khi hover
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    datalabels: {
                        color: '#333',
                        font: {
                            weight: 'bold',
                            size: 14
                        },
                        formatter: (value) => value // Hi·ªÉn th·ªã gi√° tr·ªã s·ªë m√† kh√¥ng c√≥ d·∫•u %
                    },
                    title: {
                        display: true,
                        text: 'Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán s·ªë l∆∞·ª£ng t·ª´ ti√™u c·ª±c',
                        font: {
                            size: 24
                        },
                        color: '#333'
                    },
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        title: {
                            display: true,
                            text: 'S·ªë l∆∞·ª£ng'
                        },
                        beginAtZero: true,
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'T·ª´ Ti√™u C·ª±c'
                        }
                    }
                }
            },
            plugins: [ChartDataLabels]
        });
    }

    // === BI·ªÇU ƒê·ªí C·ªòT: T·ª™ T·ªêT/X·∫§U ===
    function show_top_10_tot(words, weights) {
        if (bieu_do_top_10_tot) bieu_do_top_10_tot.destroy();

        const ctx = document.getElementById('top_10_tot').getContext('2d');
        bieu_do_top_10_tot = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: words, // T√™n c√°c t·ª´ ti√™u c·ª±c
                datasets: [{
                    label: 'S·ªë l∆∞·ª£ng t·ª´',
                    data: weights, // S·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c t·ª´
                    backgroundColor: 'rgba(255, 159, 64, 0.2)',
                    borderColor: 'rgba(255, 159, 64, 1)',
                    hoverBackgroundColor: 'rgba(255, 159, 64, 0.5)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    datalabels: {
                        color: '#333',
                        font: {
                            weight: 'bold',
                            size: 14
                        },
                        formatter: (value) => value // Hi·ªÉn th·ªã gi√° tr·ªã s·ªë m√† kh√¥ng c√≥ d·∫•u %
                    },
                    title: {
                        display: true,
                        text: 'Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán s·ªë l∆∞·ª£ng t·ª´ ti√™u c·ª±c',
                        font: {
                            size: 24
                        },
                        color: '#333'
                    },
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        title: {
                            display: true,
                            text: 'S·ªë l∆∞·ª£ng'
                        },
                        beginAtZero: true,
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'T·ª´ Ti√™u C·ª±c'
                        }
                    }
                }
            },
            plugins: [ChartDataLabels]
        });
    }


    // === BI·ªÇU ƒê·ªí C·∫¢M X√öC THEO TH·ªúI GIAN ===
    function showEmotionOverTimeChart(data) {
        if (lineChart) lineChart.destroy();

        const ctx = document.getElementById('lineChart').getContext('2d');

        const labels = data.map(entry => entry.date);
        const positiveData = data.map(entry => entry.positive);
        const negativeData = data.map(entry => entry.negative);

        lineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels,
                datasets: [{
                        label: 'T·ª´ T·ªët (%)',
                        data: positiveData,
                        borderColor: '#66BB6A', // Xanh l√° c√¢y nh·∫π
                        borderWidth: 2,
                        backgroundColor: '#66BB6A44', // Xanh l√° c√¢y nh·∫π (m·ªù)
                        fill: false,
                        tension: 0.3
                    },
                    {
                        label: 'T·ª´ X·∫•u (%)',
                        data: negativeData,
                        borderColor: '#FF7043', // Cam s√°ng
                        borderWidth: 2,
                        backgroundColor: '#FF704344', // Cam s√°ng (m·ªù)
                        fill: false,
                        tension: 0.3
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Bi·∫øn ƒë·ªông c·∫£m x√∫c theo th·ªùi gian',
                        color: '#333',
                        font: {
                            size: 28
                        }
                    },
                    legend: {
                        labels: {
                            color: '#333'
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: '#333'
                        },
                        title: {
                            display: true,
                            text: 'Ng√†y',
                            color: '#333'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#333'
                        },
                        title: {
                            display: true,
                            text: 'Ph·∫ßn trƒÉm (%)',
                            color: '#333'
                        }
                    }
                }
            }
        });
    }

    // === BI·ªÇU ƒê·ªí S·ªê L∆Ø·ª¢NG COMMENT THEO TH·ªúI GIAN THEO TH·ªúI GIAN ===
    function show_bieu_do_line_so_comment_by_time(data) {
        if (bieu_do_line_chart_comment_time) bieu_do_line_chart_comment_time.destroy();

        const ctx = document.getElementById('so_luong_comment_theo_thoi_gian').getContext('2d');

        const labels = data.dates;
        const counts = data.counts;

        bieu_do_line_chart_comment_time = new Chart(ctx, {
            type: 'line',
            data: {
                labels,
                datasets: [{
                    label: 'S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n',
                    data: counts,
                    borderColor: '#4bc0c0',
                    backgroundColor: '#4bc0c044',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.3
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo th·ªùi gian',
                        color: '#333',
                        font: {
                            size: 24
                        }
                    },
                    legend: {
                        labels: {
                            color: '#333'
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: '#333'
                        },
                        title: {
                            display: true,
                            text: 'Ng√†y',
                            color: '#333'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            color: '#333'
                        },
                        title: {
                            display: true,
                            text: 'S·ªë l∆∞·ª£ng b√¨nh lu·∫≠n',
                            color: '#333'
                        }
                    }
                }
            }
        });
    }

    function show_bieu_do_tot_xau_tren_comment(tot, xau) {
        if (bieu_do_tot_xau_tren_comment) bieu_do_tot_xau_tren_comment.destroy();

        const ctx = document.getElementById('so_luong_tot_xau_tren_comment').getContext('2d');

        bieu_do_tot_xau_tren_comment = new Chart(ctx, {
            type: 'boxplot',
            data: {
                labels: ['T·ª´ T·ªët', 'T·ª´ X·∫•u'],
                datasets: [{
                    label: 'S·ªë l∆∞·ª£ng t·ª´ tr√™n m·ªói comment',
                    backgroundColor: ['#a3e4d7', '#f5b7b1'],
                    borderColor: ['#16a085', '#c0392b'],
                    borderWidth: 1,
                    outlierColor: '#999',
                    padding: 10,
                    itemRadius: 0,
                    data: [
                        tot,
                        xau
                    ]
                }]
            },
            options: optionsWordChart("Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán trung b√¨nh t·ª´ t·ªët x√°u tr√™n m·ªói comment")

        });
    }

    function show_bieu_do_phan_bo_cam_xuc_theo_tu_khoa(data) {
        if (bieu_do_cam_xuc_theo_tu_khoa) bieu_do_cam_xuc_theo_tu_khoa.destroy();
        const keywords = data.map(item => item.keyword);
        const positives = data.map(item => item.positive);
        const negatives = data.map(item => item.negative);

        const ctx = document.getElementById('cam_xuc_theo_tu_khoa').getContext('2d');

        bieu_do_cam_xuc_theo_tu_khoa = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: keywords,
                datasets: [{
                        label: 'T·ª´ T·ªët',
                        data: positives,
                        backgroundColor: 'rgba(46, 204, 113, 0.7)', // xanh l√°
                        borderColor: 'rgba(39, 174, 96, 1)',
                        borderWidth: 1
                    },
                    {
                        label: 'T·ª´ X·∫•u',
                        data: negatives,
                        backgroundColor: 'rgba(231, 76, 60, 0.7)', // ƒë·ªè
                        borderColor: 'rgba(192, 57, 43, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Ph√¢n b·ªï c·∫£m x√∫c theo t·ª´ng t·ª´ kho√° t√¨m ki·∫øm'
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    }
                },
                scales: {
                    x: {
                        stacked: true,
                        title: {
                            display: true,
                            text: 'T·ª´ kho√°'
                        }
                    },
                    y: {
                        stacked: true,
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'S·ªë l∆∞·ª£ng t·ª´'
                        }
                    }
                }
            }
        });
    }





    // H√†m Group th·ªùi gian b√¨nh lu·∫≠n
    function groupEmotionByDate(data) {
        const grouped = {};

        data.forEach(item => {
            const date = item.date_comment.slice(0, 10); // YYYY-MM-DD
            const pos = parseFloat(item.comment_data_llm?.GPT?.phan_tram_tot || 0);
            const neg = parseFloat(item.comment_data_llm?.GPT?.phan_tram_xau || 0);

            if (!grouped[date]) {
                grouped[date] = {
                    total: 0,
                    sumPos: 0,
                    sumNeg: 0
                };
            }

            grouped[date].total += 1;
            grouped[date].sumPos += pos;
            grouped[date].sumNeg += neg;
        });

        // T√≠nh trung b√¨nh m·ªói ng√†y
        const result = Object.entries(grouped).map(([date, {
            total,
            sumPos,
            sumNeg
        }]) => ({
            date,
            positive: (sumPos / total).toFixed(2),
            negative: (sumNeg / total).toFixed(2)
        }));

        return result.sort((a, b) => new Date(a.date) - new Date(b.date));
    }

    function countCommentsByDate(data) {
        const dateCount = {};

        data.forEach(item => {
            const date = item.date_comment.slice(0, 10); // L·∫•y yyyy-mm-dd

            if (!dateCount[date]) {
                dateCount[date] = 1;
            } else {
                dateCount[date]++;
            }
        });

        const result = {
            dates: Object.keys(dateCount),
            counts: Object.values(dateCount)
        };

        return result;
    }

    function tinh_cam_xuc_theo_tu_khoa(data_tong) {
        const groupedData = {};

        data_tong.forEach(item => {
            const keyword = item.word_search || 'Kh√¥ng x√°c ƒë·ªãnh';
            const tu_tot = item.comment_data_llm?.danh_sach_tu_tot?.length || 0;
            const tu_xau = item.comment_data_llm?.danh_sach_tu_xau?.length || 0;

            if (!groupedData[keyword]) {
                groupedData[keyword] = {
                    positive: 0,
                    negative: 0
                };
            }

            groupedData[keyword].positive += tu_tot;
            groupedData[keyword].negative += tu_xau;
        });

        // Chuy·ªÉn sang m·∫£ng
        return Object.entries(groupedData).map(([keyword, values]) => ({
            keyword,
            positive: values.positive,
            negative: values.negative
        }));
    }





    // === G·ªåI API & X·ª¨ L√ù ===
    async function evaluateBrand() {
        const brandInput = document.getElementById('brandInput');
        const brandName = brandInput.value.toLowerCase().trim();
        const wordSearchInput = document.getElementById('wordSearchInput');
        const wordSearch = wordSearchInput.value.toLowerCase().trim();

        const resultDiv = document.getElementById('result-brand');
        const chartGrid = document.getElementById('chart_grid_id');

        if (!brandName) return alert("Vui l√≤ng nh·∫≠p t√™n th∆∞∆°ng hi·ªáu.");

        resultDiv.innerHTML = `<h2 style="text-align: center;">ƒêang x·ª≠ l√Ω...</h2>`;

        const formData = new FormData();
        formData.append("brand_name", brandName);
        formData.append("word_search", wordSearch);
        formData.append("user_id", '{{Auth::id()}}');

        try {
            const response = await fetch('http://localhost:60074/danh_gia_thuong_hieu/thuong_hieu', {
                method: "POST",
                headers: {
                    "API-Key": '{{ config("services.crawl_api.key") }}'
                },
                body: formData
            });

            const result = await response.json();
            console.log(result.data)

            if (response.ok && result.data) {
                const data_tong = result.data
                const data = result.data[0];
                resultDiv.innerHTML = `<h2 style = "text-align: center;">Ph√¢n t√≠ch th∆∞∆°ng hi·ªáu ${brandName}</h2>`;
                chartGrid.style.display = "block";

                // bi·ªÉu ƒë·ªì pie th·ªÉ hi·ªán t·ª∑ l·ªá b√†i post t·ª´ group v√† page
                const uniquePostsMap = new Map();
                data_tong.forEach(post => {
                    if (!uniquePostsMap.has(post.post_content)) {
                        uniquePostsMap.set(post.post_content, post);
                    }
                });
                const uniquePosts = Array.from(uniquePostsMap.values());

                // ƒê·∫øm l·∫°i
                const groupCount = uniquePosts.filter(post => post.is_group).length;
                const fanpageCount = uniquePosts.filter(post => post.is_fanpage).length;
                const ty_le_group = (groupCount / (groupCount + fanpageCount)) * 100
                const ty_le_page = (fanpageCount / (groupCount + fanpageCount)) * 100

                show_bieu_do_pie_post_group_page(
                    parseFloat(ty_le_group),
                    parseFloat(ty_le_page),
                )

                // bar chart horizontal post group page
                show_bieu_do_horizontal_bar_chart_post_group_page(groupCount, fanpageCount)

                // bi·ªÉu ƒë·ªì th·ªÉ hi·ªán s·ªë l∆∞·ª£ng comment group ho·∫∑c fanpages
                // Kh√¥ng lo·∫°i b·ªè comment tr√πng
                const comment_group = data_tong.filter(comment => comment.is_group).length;
                const comment_page = data_tong.filter(comment => comment.is_fanpage).length;

                show_bieu_do_horizontal_bar_chart_comment_group_page(comment_group, comment_page)

                // bi·ªÉu ƒë·ªì th·ªÉ hi·ªán s·ªë l∆∞·ª£ng b√†i vi·∫øt d·ª±a tr√™n word_search
                const wordSearchCount = {};

                uniquePosts.forEach(post => {
                    const word = post.word_search;
                    if (word) {
                        if (!wordSearchCount[word]) {
                            wordSearchCount[word] = 1;
                        } else {
                            wordSearchCount[word]++;
                        }
                    }
                });

                // T·∫°o dict g·ªìm 2 list: words v√† values
                const dict_word_count = {
                    words: Object.keys(wordSearchCount),
                    values: Object.values(wordSearchCount)
                };
                show_bieu_do_horizontal_bar_chart_post_word_search(dict_word_count.words, dict_word_count.values)

                // Bi·ªÉu ƒë·ªì tr√≤n hi·ªÉn th·ªã ph·∫ßn trƒÉm c·∫£m x√∫c
                showSentimentChart(
                    parseFloat(data.brand_data_llm.GPT.phan_tram_tot),
                    parseFloat(data.brand_data_llm.GPT.phan_tram_xau),
                    data.brand_name
                );

                // danh s√°ch t·ªïng
                const danh_sach_tu_tot = data.brand_data_llm.danh_sach_tu_tot;
                const danh_sach_tu_xau = data.brand_data_llm.danh_sach_tu_xau;

                const countWordGood = {};
                const countWordBad = {};

                danh_sach_tu_tot.forEach(word => {
                    countWordGood[word] = (countWordGood[word] || 0) + 1;
                });

                danh_sach_tu_xau.forEach(word => {
                    countWordBad[word] = (countWordBad[word] || 0) + 1;
                });

                const dem_tu_tot = Object.entries(countWordGood).map(([word, weight]) => ({
                    word,
                    weight
                }));

                const dem_tu_xau = Object.entries(countWordBad).map(([word, weight]) => ({
                    word,
                    weight
                }));

                // bi·ªÉu ƒë·ªì c·ªôt so s√°nh s·ªë l∆∞·ª£ng t·ª´ t·ªët v√† t·ª´ x·∫•u
                showWordCountChart(
                    danh_sach_tu_tot,
                    danh_sach_tu_xau
                );

                // Bi·ªÉu ƒë·ªì wordChart 
                if (dem_tu_tot.length > 0) {
                    showWordCloudChartGood(dem_tu_tot);
                }

                if (dem_tu_xau.length > 0) {
                    showWordCloudChartBad(dem_tu_xau);
                }


                // S·∫Øp x·∫øp d·ªØ li·ªáu t·ª´ ti√™u c·ª±c theo s·ªë l∆∞·ª£ng xu·∫•t hi·ªán (weight) gi·∫£m d·∫ßn v√† ch·ªçn top 10
                const top10NegativeWords = dem_tu_xau
                    .sort((a, b) => b.weight - a.weight) // S·∫Øp x·∫øp theo weight gi·∫£m d·∫ßn
                    .slice(0, 10);
                // L·∫•y c√°c t·ª´ v√† s·ªë l∆∞·ª£ng ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
                const labels_xau = top10NegativeWords.map(item => item.word);
                const data_top_10_xau = top10NegativeWords.map(item => item.weight);
                show_top_10_xau(labels_xau, data_top_10_xau)


                const top10PositiveWords = dem_tu_tot
                    .sort((a, b) => b.weight - a.weight) // S·∫Øp x·∫øp theo weight gi·∫£m d·∫ßn
                    .slice(0, 10);
                // L·∫•y c√°c t·ª´ v√† s·ªë l∆∞·ª£ng ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
                const labels_tot = top10PositiveWords.map(item => item.word);
                const data_top_10_tot = top10PositiveWords.map(item => item.weight);

                show_top_10_tot(labels_tot, data_top_10_tot)

                // Group nh·ªØng th·ªùi gian b√¨nh lu·∫≠n l·∫°i v·ªõi nhau
                const dataGroup = groupEmotionByDate(data_tong)
                showEmotionOverTimeChart(dataGroup)


                // show_bieu_do_line_so_comment_by_time(data )
                const countDate = countCommentsByDate(data_tong)
                show_bieu_do_line_so_comment_by_time(countDate)

                // ph√¢n b·ªë  t·ªët x·∫•u m·ªói comment: 
                const tu_tot_moi_comment = data_tong.map(item => item.comment_data_llm.danh_sach_tu_tot.length);
                const tu_xau_moi_comment = data_tong.map(item => item.comment_data_llm.danh_sach_tu_xau.length);

                show_bieu_do_tot_xau_tren_comment(tu_tot_moi_comment, tu_xau_moi_comment)

                const data_cam_xuc = tinh_cam_xuc_theo_tu_khoa(data_tong);
                show_bieu_do_phan_bo_cam_xuc_theo_tu_khoa(data_cam_xuc);


                brandInput.value = ""
                wordSearchInput.value = ""
            } else {
                resultDiv.innerHTML = `<a href="{{ route('user.gui_danh_gia') }}?brand=${brandName}" class="link_request link-light link-offset-2 link-underline link-underline-opacity-100">${result.detail || "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë√°nh gi√°."} sang trang y√™u c·∫ßu ƒë√°nh gi√°</a>`;
                bieu_do_pie_post_group_page?.destroy();
                bieu_do_horizontal_bar_chart_post_group_page?.destroy();
                bieu_do_horizontal_bar_chart_post_word_search?.destroy();
                sentimentChart?.destroy();
                wordChartCoutChart?.destroy();
                wordCloudChartGood?.destroy();
                wordCloudChartBad?.destroy();
                bieu_do_top_10_xau?.destroy();
                bieu_do_top_10_tot?.destroy();
                lineChart?.destroy();
                bieu_do_line_chart_comment_time?.destroy();
                bieu_do_horizontal_bar_chart_comment_group_page?.destroy();
                bieu_do_tot_xau_tren_comment?.destroy();
                bieu_do_cam_xuc_theo_tu_khoa?.destroy();
            }
        } catch (error) {
            console.error(error);
            resultDiv.innerHTML = `<div class="alert alert-danger">ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh g·ª≠i y√™u c·∫ßu.</div>`;
        }
    }

    // === L·∫ÆNG NGHE SUBMIT FORM ===
    document.addEventListener("DOMContentLoaded", () => {
        document.getElementById("evaluateForm").addEventListener("submit", async (e) => {
            e.preventDefault();
            Swal.showLoading();
            bieu_do_pie_post_group_page?.destroy();
            bieu_do_horizontal_bar_chart_post_group_page?.destroy();
            bieu_do_horizontal_bar_chart_post_word_search?.destroy();
            sentimentChart?.destroy();
            wordChartCoutChart?.destroy();
            wordCloudChartGood?.destroy();
            wordCloudChartBad?.destroy();
            bieu_do_top_10_xau?.destroy();
            bieu_do_top_10_tot?.destroy();
            lineChart?.destroy();
            bieu_do_line_chart_comment_time?.destroy();
            bieu_do_horizontal_bar_chart_comment_group_page?.destroy();
            bieu_do_tot_xau_tren_comment?.destroy();
            bieu_do_cam_xuc_theo_tu_khoa?.destroy();
            await evaluateBrand();
            Swal.close();
        });
    });
</script>